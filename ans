1. Advantages of Excel spreadsheets over CSV spreadsheets:
   - Formatting: Excel allows you to format data with fonts, colors, and styles, making it more visually appealing and easier to understand.
   - Formulas: Excel supports complex formulas and functions for data manipulation and analysis.
   - Charts and Graphs: Excel can create charts and graphs to visualize data.
   - Multiple Sheets: You can have multiple sheets within an Excel workbook, making it suitable for organizing and managing different types of data.
   - Data Validation: Excel provides tools for data validation and input restrictions.
   - Cell Comments: You can add comments to cells in Excel to provide additional information or context.
   - Data Sorting and Filtering: Excel offers advanced sorting and filtering options.

2. To create reader and writer objects using the `csv` module in Python, you need to pass a file-like object as an argument to `csv.reader()` and `csv.writer()`. Typically, you can open a CSV file using the built-in `open()` function and then pass the resulting file object to these functions.

   Example:
   ```python
   import csv

   # To create a reader object
   with open('data.csv', 'r') as file:
       reader = csv.reader(file)

   # To create a writer object
   with open('output.csv', 'w', newline='') as file:
       writer = csv.writer(file)
   ```

3. File objects for reader and writer objects need to be opened in the following modes:
   - For the reader: `'r'` (read mode)
   - For the writer: `'w'` (write mode)
   
   Additionally, it's a good practice to include `newline=''` as an argument when opening the file in write mode to ensure consistent newline handling across different platforms.

4. The `writerow()` method is used to write a list of data to a CSV file using a writer object. This method takes a single argument, which is the list of values to be written as a row in the CSV file.

   Example:
   ```python
   import csv

   with open('output.csv', 'w', newline='') as file:
       writer = csv.writer(file)
       data = [1, 'John', 'Doe']
       writer.writerow(data)
   ```

5. In the `csv.writer()` constructor, the `delimiter` keyword argument specifies the character used to separate fields in the CSV file, while the `lineterminator` keyword argument determines the character(s) used to terminate each line. By default, the delimiter is a comma (`,`), and the line terminator is a newline (`\n`). You can change these settings if needed.

6. The `json.loads()` function in Python takes a string of JSON data as an argument and returns a corresponding Python data structure. It deserializes (parses) the JSON string into a Python object, such as a dictionary, list, or primitive data type.

   Example:
   ```python
   import json

   json_data = '{"name": "John", "age": 30, "city": "New York"}'
   python_data = json.loads(json_data)
   ```

7. The `json.dumps()` function in Python takes a Python data structure (e.g., a dictionary, list) as an argument and returns a string representation of that data structure in JSON format. It serializes the Python object into a JSON string.

   Example:
   ```python
   import json

   python_data = {"name": "John", "age": 30, "city": "New York"}
   json_data = json.dumps(python_data)
   ```
